{"version":3,"file":"build/7.99ac848789043ba23026.js","mappings":"+KAGA,MAqBA,EArBuBA,IAA+C,IAA9C,MAAEC,EAAK,WAAEC,EAAU,mBAAEC,GAAoBH,EAE/D,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACGH,EACCG,EAAAA,cAACC,EAAAA,EAAS,CACRC,WAAYJ,EAAWI,WACvBC,OAAQL,EAAWK,OACnBC,KAAMP,EACNQ,OAAQP,EAAWO,OACnBC,QAASR,EAAWQ,UAEnBC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OACTR,EAAmB,CAAEK,KAAMI,EAAOC,MAAOX,EAAWW,MAAOC,KAAMZ,EAAWY,MAAO,IAGrF,KACH,C,gDClBQ,SAAST,EAASL,GAA0D,IAAzD,WAAEM,EAAU,OAAEC,EAAM,KAAEC,EAAI,SAAEO,EAAQ,OAAEN,EAAM,QAAEC,GAASV,EACvF,MAAOgB,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KAE7CG,EAAAA,EAAAA,YAAU,KACR,GAAKb,IAAQA,aAAI,EAAJA,EAAMc,QAAS,GAAuB,KAAjBd,aAAI,EAAJA,EAAMc,QAAc,CACpD,MAAMC,EAAgB,IAAIf,GAAMgB,MAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKF,EAAEG,YAAc,IAAID,KAAKD,EAAEE,cAC/EC,KAAKC,UAAUP,KAAmBM,KAAKC,UAAUd,IACnDC,EAAcM,EAElB,IACC,CAACf,EAAMQ,KAMVK,EAAAA,EAAAA,YAAU,KACR,IACE,MAAMU,EAAgB,GACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAWM,OAAQU,IAAK,CAC1C,MAAMC,EAAY,CAAC,EACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,EAAOe,OAAQY,IAAK,KAAAC,EACtC,MAAMlC,EAAQM,EAAO2B,GACfE,EAASpB,EAAWgB,GAAG/B,GAASoC,OAAOrB,EAAWgB,GAAG/B,IAAUQ,EAAgD,QAA1C0B,EAAGJ,EAAcA,EAAcT,OAAS,UAAE,IAAAa,GAAS,QAATA,EAAvCA,EAA0ClC,UAAM,IAAAkC,OAAA,EAAhDA,EAAkDG,EAG9HL,EAAUhC,GADRS,EACiB,CACjB6B,EAAGC,KAAKC,MAAM,IAAId,KAAKX,EAAWgB,GAAGJ,YAAYc,WACjDJ,EAAG,IAAOF,GAGO,CACjBG,EAAGC,KAAKC,MAAM,IAAId,KAAKX,EAAWgB,GAAGJ,YAAYc,WACjDJ,EAAGF,EAGT,CACAL,EAAcY,KAAKV,EACrB,CACAb,EAAcW,EAChB,CAAE,MAAOa,GACPC,QAAQD,MAAMA,GACdxB,EAAc,GAChB,IAEC,CAACJ,EAAYT,IAEhB,MAAMK,EAAQ,CACZkC,SAAUvC,EAAOwC,KAAI,CAAC9C,EAAO+C,KAAU,CACrCC,KAAM3C,EAAW0C,GACjBxC,KAAMW,EAAW4B,KAAKG,GAAMA,EAAEjD,UAKlC,MAAwB,mBAAbc,EACFA,EAAS,CAAEH,UAIb,IACT,C","sources":["webpack://inkjet-dashboard-app/./src/layouts/coating/components/CoatingDetailsTable/components/ChartComponent.js","webpack://inkjet-dashboard-app/./src/layouts/coating/components/RealtimeTable/data/ChartData.js"],"sourcesContent":["import React from 'react';\nimport ChartData from '../../RealtimeTable/data/ChartData';\n\nconst ChartComponent = ({ field, chartProps, renderDetailsChart }) => {\n\n  return (\n    <>\n      {field ? (\n        <ChartData\n          fieldNames={chartProps.fieldNames}\n          fields={chartProps.fields}\n          data={field}\n          divide={chartProps.divide}\n          reverse={chartProps.reverse}\n        >\n          {({ ddata }) =>\n            renderDetailsChart({ data: ddata, title: chartProps.title, ymax: chartProps.ymax })\n          }\n        </ChartData>\n      ) : null}\n    </>\n  );\n};\n\nexport default ChartComponent;\n","import { useEffect, useState } from \"react\";\n\nexport default function ChartData({ fieldNames, fields, data, children, divide, reverse }) {\n  const [sortedData, setSortedData] = useState([]);\n  const [dataPoints, setDataPoints] = useState([]);\n\n  useEffect(() => {\n    if ((data && data?.length > 0) || data?.length === 0) {\n      const newSortedData = [...data].sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n      if (JSON.stringify(newSortedData) !== JSON.stringify(sortedData)) {\n        setSortedData(newSortedData);\n      }\n    }\n  }, [data, sortedData]);\n\n  // const dData = useMemo(() => {\n  //   return data?.filter((item) => fields.includes(item.name));\n  // }, [data, fields]);\n\n  useEffect(() => {\n    try {\n      const newDataPoints = [];\n      for (let i = 0; i < sortedData.length; i++) {\n        const datapoint = {};\n        for (let j = 0; j < fields.length; j++) {\n          const field = fields[j];\n          const yValue = sortedData[i][field] ? Number(sortedData[i][field]) / divide : newDataPoints[newDataPoints.length - 1]?.[field]?.y;\n\n          if (reverse) {\n            datapoint[field] = {\n              x: Math.floor(new Date(sortedData[i].created_at).getTime()),\n              y: 3000 / yValue,\n            };\n          } else {\n            datapoint[field] = {\n              x: Math.floor(new Date(sortedData[i].created_at).getTime()),\n              y: yValue,\n            };\n          }\n        }\n        newDataPoints.push(datapoint);\n      }\n      setDataPoints(newDataPoints);\n    } catch (error) {\n      console.error(error);\n      setDataPoints([]); // Set an empty array in case of an error\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sortedData, fields]);\n\n  const ddata = {\n    datasets: fields.map((field, index) => ({\n      name: fieldNames[index],\n      data: dataPoints.map((d) => d[field]),\n    })),\n  };\n\n  // Ensure that children is a function and call it with the formatted data\n  if (typeof children === \"function\") {\n    return children({ ddata });\n  }\n\n  // Return null if children is not provided or not a function\n  return null;\n}\n"],"names":["_ref","field","chartProps","renderDetailsChart","React","ChartData","fieldNames","fields","data","divide","reverse","_ref2","ddata","title","ymax","children","sortedData","setSortedData","useState","dataPoints","setDataPoints","useEffect","length","newSortedData","sort","a","b","Date","created_at","JSON","stringify","newDataPoints","i","datapoint","j","_newDataPoints","yValue","Number","y","x","Math","floor","getTime","push","error","console","datasets","map","index","name","d"],"sourceRoot":""}